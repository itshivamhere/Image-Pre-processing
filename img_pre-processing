
!pip install opencv-python
!pip install scikit-image
import cv2
import numpy as np
from skimage import exposure
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator

def apply_clahe(image):
    lab = cv2.cvtColor(image, cv2.COLOR_RGB2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    cl = clahe.apply(l)
    limg = cv2.merge((cl, a, b))
    clahe_image = cv2.cvtColor(limg, cv2.COLOR_LAB2RGB)
    return clahe_image

def preprocess_image(img_path):
    # Read image
    img = cv2.imread(img_path)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)  # Convert BGR to RGB

    # Apply CLAHE
    img = apply_clahe(img)

    # Convert to grayscale
    grayscale_img = cv2.cvtColor(img, cv2.COLOR_RGB2GRAY)

    # Crop and resize
    cropped_img = img[50:450, 50:450, :]  # Adjust cropping as needed
    resized_img = cv2.resize(cropped_img, (256, 256))

    return resized_img, grayscale_img

def load_and_preprocess_images(file_paths):
    images = []
    labels = []

    for file_path in file_paths:
        try:
            processed_img, grayscale_img = preprocess_image(file_path)

            # Check if the image is not black (optional)
            if np.mean(grayscale_img) > 5:
                images.append(processed_img)
                labels.append(1)  # Assuming positive class, adjust as needed
        except Exception as e:
            print(f"Error processing image {file_path}: {str(e)}")

    return np.array(images), np.array(labels)

def data_augmentation(images, labels):
    datagen = ImageDataGenerator(
        rotation_range=20,
        horizontal_flip=True,
        vertical_flip=True
    )

    augmented_images = []
    augmented_labels = []

    for i in range(len(images)):
        img = images[i]
        label = labels[i]

        img = img.reshape((1,) + img.shape)  # Reshape for flow method
        label = np.array([label])

        # Generate augmented images
        for batch in datagen.flow(img, label, batch_size=1):
            augmented_images.append(batch[0][0])
            augmented_labels.append(batch[1][0])
            break  # Only one image per batch

    return np.array(augmented_images), np.array(augmented_labels)

